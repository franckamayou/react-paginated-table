import * as React from "react";
import FastTable from "./FastTable";
export default class PaginatedTable extends React.Component {
    constructor(props) {
        super(props);
        this.selectNextPage = () => {
            this.setState({
                currentPage: this.state.currentPage++
            });
        };
        this.selectPreviousPage = () => {
            this.setState({
                currentPage: this.state.currentPage--
            });
        };
        this.state = {
            currentPage: this.props.currentPage || 0
        };
    }
    componentWillReceiveProps(props) {
        this.setState({
            currentPage: props.currentPage
        });
    }
    render() {
        var rows = [];
        var numOfRows = 0;
        if (this.props.rows) {
            var startIndex = this.props.currentPage * Math.floor(this.props.rows.length / this.props.rowsPerPage);
            var endIndex = startIndex + this.props.rowsPerPage;
            rows = this.props.rows.slice(startIndex, endIndex);
        }
        else if (this.props.rowGetter && this.props.numOfRows)
            numOfRows = this.props.rowsPerPage;
        else if (this.props.getRowsForPageNumber)
            rows = this.props.getRowsForPageNumber(this.state.currentPage);
        return (<div>
				<FastTable {...this.props} rows={rows} numOfRows={numOfRows}/>
				<div>
					<span onClick={this.selectPreviousPage}>Prev Page</span>
					<span onClick={this.selectNextPage}>Next Page</span>
				</div>
			</div>);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnaW5hdGVkVGFibGUuanN4Iiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1BhZ2luYXRlZFRhYmxlLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPO09BQ3ZCLFNBQVMsTUFBTSxhQUFhO0FBZW5DLDRDQUE0QyxLQUFLLENBQUMsU0FBUztJQUUxRCxZQUFZLEtBQXlCO1FBQ3BDLE1BQU0sS0FBSyxDQUFDLENBQUM7UUFZZCxtQkFBYyxHQUFHO1lBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ2IsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFO2FBQ3JDLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQztRQUVGLHVCQUFrQixHQUFHO1lBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ2IsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFO2FBQ3JDLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQztRQXJCRCxJQUFJLENBQUMsS0FBSyxHQUFHO1lBQ1osV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUM7U0FDeEMsQ0FBQTtJQUNGLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxLQUF5QjtRQUNsRCxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ2IsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1NBQzlCLENBQUMsQ0FBQTtJQUNILENBQUM7SUFjRCxNQUFNO1FBQ0wsSUFBSSxJQUFJLEdBQXdCLEVBQUUsQ0FBQztRQUNuQyxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFFbEIsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FDbkIsQ0FBQztZQUNBLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDdEcsSUFBSSxRQUFRLEdBQUcsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO1lBQ25ELElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3BELENBQUM7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7WUFDcEQsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDO1lBQ3ZDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEUsTUFBTSxDQUFDLENBQ04sQ0FBQyxHQUFHLENBQ0g7SUFBQSxDQUFDLFNBQVMsS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUM1RDtJQUFBLENBQUMsR0FBRyxDQUNIO0tBQUEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksQ0FDdkQ7S0FBQSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksQ0FDcEQ7SUFBQSxFQUFFLEdBQUcsQ0FDTjtHQUFBLEVBQUUsR0FBRyxDQUFDLENBQ04sQ0FBQTtJQUNGLENBQUM7QUFDRixDQUFDO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBGYXN0VGFibGUgZnJvbSBcIi4vRmFzdFRhYmxlXCI7XG5pbXBvcnQge0Zhc3RUYWJsZVByb3BzfSBmcm9tIFwiLi9GYXN0VGFibGVcIjtcblxuZXhwb3J0IGludGVyZmFjZSBQYWdpbmF0ZWRUYWJsZVByb3BzIGV4dGVuZHMgRmFzdFRhYmxlUHJvcHN7XG5cdGN1cnJlbnRQYWdlOm51bWJlcjtcblx0cm93c1BlclBhZ2U6bnVtYmVyO1xuXHRnZXRSb3dzRm9yUGFnZU51bWJlcj86KHBhZ2VOdW1iZXI6bnVtYmVyKT0+UmVhY3QuUmVhY3RDaGlsZFtdW107XG5cdG9uUGFnZUNoYW5nZT86KHBhZ2VOdW1iZXI6bnVtYmVyKT0+dm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYWdpbmF0ZWRUYWJsZVN0YXRlIHtcblx0cm93c0luUGFnZT86UmVhY3QuUmVhY3RDaGlsZFtdW107XG5cdGN1cnJlbnRQYWdlOm51bWJlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFnaW5hdGVkVGFibGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UGFnaW5hdGVkVGFibGVQcm9wcywgUGFnaW5hdGVkVGFibGVTdGF0ZT4ge1xuXG5cdGNvbnN0cnVjdG9yKHByb3BzOlBhZ2luYXRlZFRhYmxlUHJvcHMpIHtcblx0XHRzdXBlcihwcm9wcyk7XG5cdFx0dGhpcy5zdGF0ZSA9IHtcblx0XHRcdGN1cnJlbnRQYWdlOiB0aGlzLnByb3BzLmN1cnJlbnRQYWdlIHx8IDBcblx0XHR9XG5cdH1cblxuXHRjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHByb3BzOlBhZ2luYXRlZFRhYmxlUHJvcHMpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGN1cnJlbnRQYWdlOiBwcm9wcy5jdXJyZW50UGFnZVxuXHRcdH0pXG5cdH1cblxuXHRzZWxlY3ROZXh0UGFnZSA9ICgpID0+IHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGN1cnJlbnRQYWdlOiB0aGlzLnN0YXRlLmN1cnJlbnRQYWdlKytcblx0XHR9KTtcblx0fTtcblxuXHRzZWxlY3RQcmV2aW91c1BhZ2UgPSAoKSA9PiB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRjdXJyZW50UGFnZTogdGhpcy5zdGF0ZS5jdXJyZW50UGFnZS0tXG5cdFx0fSk7XG5cdH07XG5cblx0cmVuZGVyKCkge1xuXHRcdHZhciByb3dzOlJlYWN0LlJlYWN0Q2hpbGRbXVtdID0gW107XG5cdFx0dmFyIG51bU9mUm93cyA9IDA7XG5cblx0XHRpZih0aGlzLnByb3BzLnJvd3MpXG5cdFx0e1xuXHRcdFx0dmFyIHN0YXJ0SW5kZXggPSB0aGlzLnByb3BzLmN1cnJlbnRQYWdlICogTWF0aC5mbG9vcih0aGlzLnByb3BzLnJvd3MubGVuZ3RoIC8gdGhpcy5wcm9wcy5yb3dzUGVyUGFnZSk7XG5cdFx0XHR2YXIgZW5kSW5kZXggPSBzdGFydEluZGV4ICsgdGhpcy5wcm9wcy5yb3dzUGVyUGFnZTtcblx0XHRcdHJvd3MgPSB0aGlzLnByb3BzLnJvd3Muc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuXHRcdH1cblx0XHRlbHNlIGlmKHRoaXMucHJvcHMucm93R2V0dGVyICYmIHRoaXMucHJvcHMubnVtT2ZSb3dzKVxuXHRcdFx0bnVtT2ZSb3dzID0gdGhpcy5wcm9wcy5yb3dzUGVyUGFnZTtcblx0XHRlbHNlIGlmKHRoaXMucHJvcHMuZ2V0Um93c0ZvclBhZ2VOdW1iZXIpXG5cdFx0XHRyb3dzID0gdGhpcy5wcm9wcy5nZXRSb3dzRm9yUGFnZU51bWJlcih0aGlzLnN0YXRlLmN1cnJlbnRQYWdlKTtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdj5cblx0XHRcdFx0PEZhc3RUYWJsZSB7Li4udGhpcy5wcm9wc30gcm93cz17cm93c30gbnVtT2ZSb3dzPXtudW1PZlJvd3N9Lz5cblx0XHRcdFx0PGRpdj5cblx0XHRcdFx0XHQ8c3BhbiBvbkNsaWNrPXt0aGlzLnNlbGVjdFByZXZpb3VzUGFnZX0+UHJldiBQYWdlPC9zcGFuPlxuXHRcdFx0XHRcdDxzcGFuIG9uQ2xpY2s9e3RoaXMuc2VsZWN0TmV4dFBhZ2V9Pk5leHQgUGFnZTwvc3Bhbj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQpXG5cdH1cbn0iXX0=