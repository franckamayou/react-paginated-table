import * as React from "react";
import * as _ from "lodash";
export default class FastTable extends React.Component {
    constructor(props) {
        super(props);
        this.updateVisibleRange = () => {
            var visibleRange = [0, 0];
            if (this.container && this.props.rows) {
                var start = Math.floor(this.container.scrollTop * this.height);
                // start + number of rows in the view;
                var end = start + Math.ceil(this.height / this.numOfRows);
                visibleRange = [start, end];
            }
            this.setState({ visibleRange });
        };
        this.state = {
            visibleRange: [0, 0]
        };
    }
    componentDidMount() {
        this.width = this.container.clientWidth;
        this.height = this.container.clientHeight;
        this.forceUpdate();
    }
    componentDidUpdate() {
        this.width = this.container.clientWidth;
        this.height = this.container.clientHeight;
    }
    get numOfRows() {
        if (this.props.rows)
            return this.props.rows.length;
        return this.props.numOfRows || 0;
    }
    renderColumnHeaders() {
        return (<tr>
				{this.props.columnHeader.map((header, index) => <th key={index}>{header}</th>)}
			</tr>);
    }
    renderVisibleRows() {
        var [start, end] = this.state.visibleRange;
        var visibleRows = [];
        for (var i = start; i < end; i++) {
            var row = this.props.rows ? this.props.rows[i] : this.props.rowGetter && this.props.rowGetter(i);
            visibleRows.push(<tr key={i} style={this.props.rowStyleGetter && this.props.rowStyleGetter(i)} className={this.props.rowClassNameGetter && this.props.rowClassNameGetter(i)} onMouseOver={(event) => this.props.onRowHover && this.props.onRowHover(i, event)} onClick={(event) => this.props.onRowSelect && this.props.onRowSelect(i, event)}>
					{row.map((cell, index) => <td key={index}>{cell}</td>)}
				</tr>);
        }
        return visibleRows;
    }
    renderColGroups() {
        return this.props.columnHeader.map((columnHeader, index) => {
            return (<col key={index} style={this.props.colStyleGetter && this.props.colStyleGetter(index)} className={this.props.colClassNameGetter && this.props.colClassNameGetter(index)}/>);
        });
    }
    render() {
        return (<div ref={(e) => this.container = e} style={{ width: this.props.width || "100%", height: this.props.height || "100%" }} onScroll={this.updateVisibleRange}>
				<table style={_.merge(this.props.style, { height: this.props.rowHeight * this.numOfRows })} className={this.props.className} ref={(t) => this.table = t}>
					<colgroup>
						{this.renderColGroups()}
					</colgroup>
					<thead style={this.props.theadStyle} className={this.props.theadClassName}>
						{this.renderColumnHeaders()}
					</thead>
					<tbody style={this.props.tbodyStyle} className={this.props.tbodyClassName}>
						{this.renderVisibleRows()}
					</tbody>
				</table>
			</div>);
    }
}
//# sourceMappingURL=data:application/json;base64,